Maria Moșneag
333CA
Sisteme de Operare
Tema 4

Organizare

	- so_scheduler.c:		conține implementarea funcțiilor exportate de plani-
							ficator
	- so_scheduler.h
	- linkedlist.c:			conține implementarea funcțiilor specifice lucrului
							cu liste înlănțuite utilizate în cadrul planificato-
							rului
	- linkedlist.h
	- utils.h:				conține macro-ul DIE
							(preluat din laboratoarele de SO)
	- Makefile
	- README


Implementare

	Întregul enunț al temei este implementat pentru Linux.

	-> Principalele structuri folosite în cadrul implementării sunt:
		+ so_task:		memorează informații specifice unui thread
		+ so_scheduler:	stochează datele planificatorului

	-> Pentru a putea controla execuția unui thread, în cadrul fiecărei struc-
	   turi so_task se găsește și un semafor prin intermediul căruia thread-ul
	   este blocat sau deblocat.

	-> Informațiile referitoare la thread-ul curent (singurul care este running)
	   se găsesc în so_scheduler: structura so_task asociată (running) și timpul
	   rămas din cuanta curentă (current_quantum).

	-> Thread-urile blocate într-o operație cu IO sunt memorate în waiting, din
	   cadrul so_scheduler. Acesta este un vector de liste înlănțuite.
	   Într-o listă înlănțuită se găsesc thread-uri care așteaptă același eveni-
	   ment IO; thread-urile se găsesc în ordinea în care s-au blocat, cel mai
	   vechi fiind primul în listă.

	-> După ce își termină execuția, thread-urile sunt inserate în lista
	   terminated.

	-> În cazul în care dintr-un thread se apelează so_end(), datele despre a-
	   cesta sunt păstrate în ending_thread astfel încât să fie posibilă repla-
	   nificarea acestuia pe procesor după ce toate celelalte thread-uri își
	   termină execuția.

	-> Funcția cheie în cadrul implementării este schedule(). Aceasta determină
	   care este thread-ul ce va rula în continuare, blochează și pornește
	   thread-urile prin intermediul semafoarelor din structura so_task asociată
	   acestora și actualizează în mod corespunzător datele din so_scheduler.


Cum se compilează?

	build:
		Linux:
			make

Bibliografie:

	Laborator 08 - SO
		https://ocw.cs.pub.ro/courses/so/laboratoare/laborator-08
	Linux kernel coding style
		https://www.kernel.org/doc/Documentation/process/coding-style.rst
